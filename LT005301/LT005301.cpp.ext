+++
date = "2016-04-05"
!outline = "en_1"
!outline_level = 3
!top = ""
!mark = ""
tags = [
    "LT0053"
]
!template = md2.template
!domain = ""
+++


- LT0053 (name=Maximum Subarray, ptag=Leetcode) @TAG(Term, Medium-OJ)
    - [Maximum Subarray - Leetcode](https://leetcode.com/problems/maximum-subarray/) @TAG(LT0053)

    Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

    For example, given the array
    `[-2,1,-3,4,-1,2,1,-5,4]` ,

    the contiguous subarray
    `[4,-1,2,1]` has the largest sum = `6` .

    **More practice:**

    If you have figured out the O( *n* ) solution, try coding another solution using the divide and conquer approach, which is more subtle.


- Best Solution

            class Solution {
            public:
                int maxSubArray(const vector<int>& nums) {
                
                    int answer = INT_MIN;
                    int sub = 0;
                    for(size_t i = 0; i < nums.size(); ++i)
                    {
                        sub = std::max( nums.at(i), sub + nums.at(i));
                        answer = std::max( answer, sub );
                    }
                    
                    return answer;
                }
            };