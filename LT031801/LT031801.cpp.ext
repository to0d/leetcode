+++
date = "2016-04-13"
!outline = "en_1"
!outline_level = 3
!top = ""
!mark = ""
tags = [
    "LT0318"
]
!template = md2.template
!domain = ""
+++


- LT0318 (name=Maximum Product of Word Lengths, ptag=Leetcode) @TAG(Term, Medium-OJ)
    - [Maximum Product of Word Lengths - Leetcode](https://leetcode.com/problems/maximum-product-of-word-lengths/) @TAG(LT0318)

    Given a string array `words` , find the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return 0.

    Example 1:

            Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
            Output: 16
            Explanation: The two words can be "abcw", "xtfn".

    Example 2:

            Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
            Output: 4
            Explanation: The two words can be "ab", "cd".

    Example 3:

            Input: words = ["a","aa","aaa","aaaa"]
            Output: 0
            Explanation: No such pair of words.


- **Better solution learn from other solution** @TAG(LT0318)

        class Solution {
        public:
            int maxProduct(vector<string>& words) {
                
               int len = words.size();
               if( len == 0 ) 
                   return 0;
               
               vector<int> masks;
               for( auto s : words)
                   masks.push_back( getMask(s));
            
               int res = -1;
               for( int i = 0; i < len ; ++i )
               {
                   int la = words[i].size();
                   for( int j = i+1; j < len ; ++j )
                   {
                       int lb = words[j].size();
                       if( la*lb > res && (masks[i]& masks[j]) == 0)
                            res = la * lb;
                   }      
               }
               return res < 0 ? 0 : res;
            }
            
            int getMask(const string& str)
            {
                int mask = 0;
                for( char c : str)
                {
                    mask |= (1 << (c-'a'));
                    if (mask == 0x3FFFFFF)
                        break;
                }  
                return mask;
            }
        };