+++
date = "2016-06-27"
!outline = "en_1"
!outline_level = 3
!top = ""
!mark = ""
tags = [
    "LT0289"
]
!template = md2.template
!domain = ""
+++


- LT0289 (name=Game of Life, ptag=Leetcode) @TAG(Term, Medium-OJ, GameOfLife)
    - [Game of Life - Leetcode](https://leetcode.com/problems/game-of-life/) @TAG(LT0289)

    According to the
    [Wikipedia's article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)
    : "The

    **Game of Life**
    , also known simply as

    **Life**
    , is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

    Given a
    *board* with
    *m* by
    *n* cells, each cell has an initial state
    *live* (1) or
    *dead* (0). Each cell interacts with its
    [eight neighbors](https://en.wikipedia.org/wiki/Moore_neighborhood)
    (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

    1. Any live cell with fewer than two live neighbors dies, as if caused by under-population.
    1. Any live cell with two or three live neighbors lives on to the next generation.
    1. Any live cell with more than three live neighbors dies, as if by over-population..
    1. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.

    Write a function to compute the next state (after one update) of the board given its current state.

    **Follow up** :

    1. Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
    1. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?


